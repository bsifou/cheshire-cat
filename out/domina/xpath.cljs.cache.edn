{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name domina.xpath, :imports nil, :requires {domina domina, dom goog.dom, goog.dom goog.dom}, :uses nil, :defs {select-node* {:protocol-inline nil, :meta {:file "/home/biris/clojure/cheshire-cat/out/domina/xpath.cljs", :line 10, :column 8, :end-line 10, :end-column 20, :private true, :arglists (quote ([path node technique-1 technique-2]))}, :private true, :name domina.xpath/select-node*, :variadic false, :file "out/domina/xpath.cljs", :end-column 20, :method-params ([path node technique-1 technique-2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 4, :fn-var true, :arglists (quote ([path node technique-1 technique-2]))}, select-node {:protocol-inline nil, :meta {:file "/home/biris/clojure/cheshire-cat/out/domina/xpath.cljs", :line 22, :column 8, :end-line 22, :end-column 19, :private true, :arglists (quote ([expr node])), :doc "Selects a single node using an XPath expression and a root node"}, :private true, :name domina.xpath/select-node, :variadic false, :file "out/domina/xpath.cljs", :end-column 19, :method-params ([expr node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([expr node])), :doc "Selects a single node using an XPath expression and a root node"}, select-nodes {:protocol-inline nil, :meta {:file "/home/biris/clojure/cheshire-cat/out/domina/xpath.cljs", :line 33, :column 8, :end-line 33, :end-column 20, :private true, :arglists (quote ([expr node])), :doc "Selects multiple nodes using an XPath expression and a root node"}, :private true, :name domina.xpath/select-nodes, :variadic false, :file "out/domina/xpath.cljs", :end-column 20, :method-params ([expr node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([expr node])), :doc "Selects multiple nodes using an XPath expression and a root node"}, root-element {:protocol-inline nil, :meta {:file "/home/biris/clojure/cheshire-cat/out/domina/xpath.cljs", :line 48, :column 8, :end-line 48, :end-column 20, :private true, :arglists (quote ([]))}, :private true, :name domina.xpath/root-element, :variadic false, :file "out/domina/xpath.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, xpath {:protocol-inline nil, :meta {:file "/home/biris/clojure/cheshire-cat/out/domina/xpath.cljs", :line 52, :column 7, :end-line 52, :end-column 12, :arglists (quote ([expr] [base expr])), :doc "Returns content based on an xpath expression. Takes an optional content as a base; if none is given, uses the HTML element as a base.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([expr] [base expr]), :arglists ([expr] [base expr]), :arglists-meta (nil nil)}}, :name domina.xpath/xpath, :variadic false, :file "out/domina/xpath.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([expr] [base expr]), :arglists ([expr] [base expr]), :arglists-meta (nil nil)}, :method-params ([expr] [base expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 2, :fn-var true, :arglists ([expr] [base expr]), :doc "Returns content based on an xpath expression. Takes an optional content as a base; if none is given, uses the HTML element as a base."}, t_domina$xpath18227 {:num-fields 3, :protocols #{domina/DomContent cljs.core/IMeta cljs.core/IWithMeta}, :name domina.xpath/t_domina$xpath18227, :file "out/domina/xpath.cljs", :type true, :anonymous true, :column 16, :line 55, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_domina$xpath18227 {:protocol-inline nil, :meta {:anonymous true, :protocols #{domina/DomContent cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([base expr meta18228])), :file nil}, :protocols #{domina/DomContent cljs.core/IMeta cljs.core/IWithMeta}, :name domina.xpath/->t_domina$xpath18227, :variadic false, :file "out/domina/xpath.cljs", :method-params ([base expr meta18228]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 16, :factory :positional, :line 55, :max-fixed-arity 3, :fn-var true, :arglists (quote ([base expr meta18228])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{base :else meta18228 expr}, :order [:else base expr meta18228]}, :doc nil}